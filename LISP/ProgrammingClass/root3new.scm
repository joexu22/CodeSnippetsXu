(define (root3 x)
    (define (root-iter high mid low last)
        (cond
            ((= last (new-mid high low)) last)
            ((> (** mid 3) x) (root-iter mid (new-mid high low) low mid))
            (else (root-iter high (new-mid high low) mid mid))
        )
    )
    (define (new-mid h l) (/ (+ h l) 2.0))
    (if (> x 1) (root-iter x (new-mid x 1) 1 x) (root-iter 1 (new-mid 1 0) 0 x))
)

(inspect (root3 125))
(inspect (root3 1))
(inspect (root3 2000000))
(inspect (root3 (- (** 1290 3) 25)))
(inspect (root3 (** 19 3)))
(inspect (root3 (** 67 3)))
(inspect (** (root3 .009) 3))
(inspect (root3 .009))
(inspect (** (root3 9) 3))
(inspect (** (root3 .123) 3))
(inspect (** (root3 .00012) 3))
(inspect (** (root3 625) 3))
(inspect (** (root3 88) 3))
(inspect (** (root3 .34324) 3))
(inspect (** (root3 1) 3))
(inspect (** (root3 3) 3))
